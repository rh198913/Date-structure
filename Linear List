一，线性表的定义 ： 零个或多个数据元素的有限序列（有前去有后继且一一对应）
     ai可代表数据元素a在线性表中的位序，且线性表中的都是相同类型的数列
     

二，线性表的抽象数据类型
  Operation:
     InitList(*L):初始化操作，建立一个空的线性表L
     ListEmpty(L):若线性表为空，返回true,否则返回false
     ClearList(*L)：线性表清空
     GetElem(L,i,*e):将线性表L中的第i个位置元素值返回给e
     LocatElem(L,e):在L中查找与给定值相等的E的元素,成功返回true，失败返回false
     ListInsert(*L，i,e):在线性表中第i个元素插入新元素e
     ListDelet(*L，i,*e):将线性表中第i个元素删除并用e返回其值
     ListLengh(L)：返回线性表的元素个数
例：实现AB两个线性表合并
思想：把存在于B但不在A的插入到A中即可
void union(List *La,List Lb)
{
    int La_len,Lb_len,i;
    ElemType e;//声明有相同的数据元素e*
    La_len = ListLength(La);//求长度
    Lb_len = ListLength(Lb);
    for(i=i;i<=Lb_len;i++)
    {
        GetElem(Lb,i,e);//取i赋值给e
        if(!LocateElem(La,e,equal))//如果la中不存在于e相同的元素
            ListInsert(La,++La_len,e);//插入
    }
}







#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include<malloc.h>
/*结构体 = 数据和指针域
链表的节点 = 数据域 + 指针域
链表的作用就是把结构体变量和结构变量联系在一起 
动态；创建一个链表：动态内存申请+模块化设计
1.创建链表（创建一个表头表示整个链表）
2.插入节点
3.删除节点
4.打印遍历链表（测试）
原理：结构体指针动态内存申请变成结构体变量
*/
/* struct node{
    int data;//数据域
    struct node* next;//指针域
};
int main()
{
    struct node node1 = {1,NULL};//创建节点变量
    struct node node2 = {2,NULL};//创建节点变量
    struct node node3 = {3,NULL};//创建节点变量
    node1.next = &node2;
    node2.next = &node3;//此处一般称为静态链表
    system("pause");
    return 0;
} */
struct node {
    int data;//数据域
    struct node* next;
};
struct node* creatlist()

    {
        struct node* headnode = (struct node*)nalloc(sizeof(struct node));
         //此处进行动态内存申请操作，headnode 变成结构体变量
        //变量使用前必须被初始化
        headnode-> data = 1;
        headnode->next = NULL;
        return headnode;//后期需要更改会形成差异化   
    };
//封装一个创建节点的功能插入的时候得有
struct node* creatnode(int data)//比链表多一个数据域
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    //指针变成变量动态申请
    newnode->data = data;
    newnode->next = NULL;//初始化一下再返回
    reurn newnode;   
};

int main()
{
    
}
    



                                                      
     
      
